From 10cc4c287ea07fe920eeb2b6e4abf0e62904d326 Mon Sep 17 00:00:00 2001
From: root <root@FA002202>
Date: Fri, 11 Apr 2025 20:04:04 +0800
Subject: [PATCH] add atoms3r board

---
 components/audio_board/CMakeLists.txt         |   9 +
 components/audio_board/Kconfig.projbuild      |   2 +
 .../audio_board/m5stack_atoms3r/board.c       |  84 ++++++++++
 .../audio_board/m5stack_atoms3r/board.h       | 108 ++++++++++++
 .../audio_board/m5stack_atoms3r/board_def.h   |  96 +++++++++++
 .../m5stack_atoms3r/board_pins_config.c       | 155 ++++++++++++++++++
 6 files changed, 454 insertions(+)
 create mode 100644 components/audio_board/m5stack_atoms3r/board.c
 create mode 100644 components/audio_board/m5stack_atoms3r/board.h
 create mode 100644 components/audio_board/m5stack_atoms3r/board_def.h
 create mode 100644 components/audio_board/m5stack_atoms3r/board_pins_config.c

diff --git a/components/audio_board/CMakeLists.txt b/components/audio_board/CMakeLists.txt
index 7106c3fcf..9a3a0f8e4 100644
--- a/components/audio_board/CMakeLists.txt
+++ b/components/audio_board/CMakeLists.txt
@@ -115,6 +115,15 @@ set(COMPONENT_SRCS
 )
 endif()
 
+if (CONFIG_M5STACK_ATOMS3R_BOARD)
+message(STATUS "Current board name is " CONFIG_M5STACK_ATOMS3R_BOARD)
+list(APPEND COMPONENT_ADD_INCLUDEDIRS ./m5stack_atoms3r)
+set(COMPONENT_SRCS
+./m5stack_atoms3r/board.c
+./m5stack_atoms3r/board_pins_config.c
+)
+endif()
+
 if (CONFIG_ESP32_C3_LYRA_V2_BOARD)
 message(STATUS "Current board name is " CONFIG_ESP32_C3_LYRA_V2_BOARD)
 list(APPEND COMPONENT_ADD_INCLUDEDIRS ./esp32_c3_lyra)
diff --git a/components/audio_board/Kconfig.projbuild b/components/audio_board/Kconfig.projbuild
index 16b2b26b5..b091ef65d 100644
--- a/components/audio_board/Kconfig.projbuild
+++ b/components/audio_board/Kconfig.projbuild
@@ -31,6 +31,8 @@ config ESP32_S3_BOX_BOARD
     bool "ESP32-S3-BOX"
 config ESP32_S3_BOX_3_BOARD
     bool "ESP32-S3-BOX-3"
+config M5STACK_ATOMS3R_BOARD
+    bool "M5STACK-ATOMS3R"
 config ESP32_C3_LYRA_V2_BOARD
     bool "ESP32-C3-Lyra-v2.0"
 config ESP32_C6_DEVKIT_BOARD
diff --git a/components/audio_board/m5stack_atoms3r/board.c b/components/audio_board/m5stack_atoms3r/board.c
new file mode 100644
index 000000000..283f7f477
--- /dev/null
+++ b/components/audio_board/m5stack_atoms3r/board.c
@@ -0,0 +1,84 @@
+/*
+ * ESPRESSIF MIT License
+ *
+ * Copyright (c) 2022 <ESPRESSIF SYSTEMS (SHANGHAI) CO., LTD>
+ *
+ * Permission is hereby granted for use on all ESPRESSIF SYSTEMS products, in which case,
+ * it is free of charge, to any person obtaining a copy of this software and associated
+ * documentation files (the "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the Software is furnished
+ * to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all copies or
+ * substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *
+ */
+
+#include "esp_log.h"
+#include "board.h"
+#include "audio_mem.h"
+#include "periph_sdcard.h"
+#include "periph_adc_button.h"
+#include "tca9554.h"
+
+static const char *TAG = "AUDIO_BOARD";
+
+static audio_board_handle_t board_handle = 0;
+
+audio_board_handle_t audio_board_init(void)
+{
+    if (board_handle) {
+        ESP_LOGW(TAG, "The board has already been initialized!");
+        return board_handle;
+    }
+    board_handle = (audio_board_handle_t) audio_calloc(1, sizeof(struct audio_board_handle));
+    AUDIO_MEM_CHECK(TAG, board_handle, return NULL);
+    board_handle->audio_hal = audio_board_codec_init();
+    return board_handle;
+}
+
+audio_hal_handle_t audio_board_codec_init(void)
+{
+    audio_hal_codec_config_t audio_codec_cfg = AUDIO_CODEC_DEFAULT_CONFIG();
+    audio_hal_handle_t codec_hal = audio_hal_init(&audio_codec_cfg, &AUDIO_CODEC_ES8311_DEFAULT_HANDLE);
+    AUDIO_NULL_CHECK(TAG, codec_hal, return NULL);
+    return codec_hal;
+}
+
+esp_err_t audio_board_key_init(esp_periph_set_handle_t set)
+{
+    periph_adc_button_cfg_t adc_btn_cfg = PERIPH_ADC_BUTTON_DEFAULT_CONFIG();
+    adc_arr_t adc_btn_tag = ADC_DEFAULT_ARR();
+    adc_btn_tag.total_steps = 6;
+    adc_btn_tag.adc_ch = ADC1_CHANNEL_4;
+    int btn_array[7] = {190, 600, 1000, 1375, 1775, 2195, 3000};
+    adc_btn_tag.adc_level_step = btn_array;
+    adc_btn_cfg.arr = &adc_btn_tag;
+    adc_btn_cfg.arr_size = 1;
+    esp_periph_handle_t adc_btn_handle = periph_adc_button_init(&adc_btn_cfg);
+    AUDIO_NULL_CHECK(TAG, adc_btn_handle, return ESP_ERR_ADF_MEMORY_LACK);
+    return esp_periph_start(set, adc_btn_handle);
+
+}
+
+audio_board_handle_t audio_board_get_handle(void)
+{
+    return board_handle;
+}
+
+esp_err_t audio_board_deinit(audio_board_handle_t audio_board)
+{
+    esp_err_t ret = ESP_OK;
+    ret |= audio_hal_deinit(audio_board->audio_hal);
+    audio_free(audio_board);
+    board_handle = NULL;
+    return ret;
+}
diff --git a/components/audio_board/m5stack_atoms3r/board.h b/components/audio_board/m5stack_atoms3r/board.h
new file mode 100644
index 000000000..838b05b7d
--- /dev/null
+++ b/components/audio_board/m5stack_atoms3r/board.h
@@ -0,0 +1,108 @@
+/*
+ * ESPRESSIF MIT License
+ *
+ * Copyright (c) 2022 <ESPRESSIF SYSTEMS (SHANGHAI) CO., LTD>
+ *
+ * Permission is hereby granted for use on all ESPRESSIF SYSTEMS products, in which case,
+ * it is free of charge, to any person obtaining a copy of this software and associated
+ * documentation files (the "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the Software is furnished
+ * to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all copies or
+ * substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *
+ */
+
+#ifndef _AUDIO_BOARD_H_
+#define _AUDIO_BOARD_H_
+
+#include "audio_hal.h"
+#include "board_def.h"
+#include "board_pins_config.h"
+#include "esp_peripherals.h"
+#include "display_service.h"
+#include "periph_sdcard.h"
+#include "periph_lcd.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/**
+ * @brief Audio board handle
+ */
+struct audio_board_handle {
+    audio_hal_handle_t audio_hal; /*!< audio hardware abstract layer handle */
+};
+
+typedef struct audio_board_handle *audio_board_handle_t;
+
+/**
+ * @brief Initialize audio board
+ *
+ * @return The audio board handle
+ */
+audio_board_handle_t audio_board_init(void);
+
+/**
+ * @brief Initialize codec chip
+ *
+ * @return The audio hal handle
+ */
+audio_hal_handle_t audio_board_codec_init(void);
+
+
+
+/**
+ * @brief Initialize key peripheral
+ *
+ * @param set The handle of esp_periph_set_handle_t
+ *
+ * @return
+ *     - ESP_OK, success
+ *     - Others, fail
+ */
+esp_err_t audio_board_key_init(esp_periph_set_handle_t set);
+
+/**
+ * @brief Initialize sdcard peripheral
+ *
+ * @param set The handle of esp_periph_set_handle_t
+ *
+ * @return
+ *     - ESP_OK, success
+ *     - Others, fail
+ */
+esp_err_t audio_board_sdcard_init(esp_periph_set_handle_t set, periph_sdcard_mode_t mode);
+
+/**
+ * @brief Query audio_board_handle
+ *
+ * @return The audio board handle
+ */
+audio_board_handle_t audio_board_get_handle(void);
+
+/**
+ * @brief Uninitialize the audio board
+ *
+ * @param audio_board The handle of audio board
+ *
+ * @return  0       success,
+ *          others  fail
+ */
+esp_err_t audio_board_deinit(audio_board_handle_t audio_board);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff --git a/components/audio_board/m5stack_atoms3r/board_def.h b/components/audio_board/m5stack_atoms3r/board_def.h
new file mode 100644
index 000000000..915cafe5a
--- /dev/null
+++ b/components/audio_board/m5stack_atoms3r/board_def.h
@@ -0,0 +1,96 @@
+/*
+ * ESPRESSIF MIT License
+ *
+ * Copyright (c) 2025 <ESPRESSIF SYSTEMS (SHANGHAI) CO., LTD>
+ *
+ * Permission is hereby granted for use on all ESPRESSIF SYSTEMS products, in which case,
+ * it is free of charge, to any person obtaining a copy of this software and associated
+ * documentation files (the "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the Software is furnished
+ * to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all copies or
+ * substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *
+ */
+
+#ifndef _AUDIO_BOARD_DEFINITION_H_
+#define _AUDIO_BOARD_DEFINITION_H_
+
+/**
+ * @brief SDCARD Function Definition
+ */
+#define FUNC_SDCARD_EN              (0)
+#define SDCARD_OPEN_FILE_NUM_MAX    (0)
+#define SDCARD_INTR_GPIO            (-1)
+#define SDCARD_PWR_CTRL             GPIO_NUM_NC
+#define ESP_SD_PIN_CLK              GPIO_NUM_NC
+#define ESP_SD_PIN_CMD              GPIO_NUM_NC
+#define ESP_SD_PIN_D0               GPIO_NUM_NC
+#define ESP_SD_PIN_D1               GPIO_NUM_NC
+#define ESP_SD_PIN_D2               GPIO_NUM_NC
+#define ESP_SD_PIN_D3               GPIO_NUM_NC
+#define ESP_SD_PIN_D4               GPIO_NUM_NC
+#define ESP_SD_PIN_D5               GPIO_NUM_NC
+#define ESP_SD_PIN_D6               GPIO_NUM_NC
+#define ESP_SD_PIN_D7               GPIO_NUM_NC
+#define ESP_SD_PIN_CD               GPIO_NUM_NC
+#define ESP_SD_PIN_WP               GPIO_NUM_NC
+
+/**
+ * @brief Audio Codec Chip Function Definition
+ */
+#define FUNC_AUDIO_CODEC_EN         (1)
+#define ES8311_MCLK_SOURCE          (1)   /* 0 From MCLK of esp32   1 From BCLK */
+#define HEADPHONE_DETECT            (-1)
+#define PA_ENABLE_GPIO              GPIO_NUM_NC
+#define CODEC_ADC_I2S_PORT          ((i2s_port_t)0)
+#define CODEC_ADC_BITS_PER_SAMPLE   ((i2s_data_bit_width_t)16) /* 16bit */
+#define CODEC_ADC_SAMPLE_RATE       (48000)
+#define RECORD_HARDWARE_AEC         (true)
+#define BOARD_PA_GAIN               (6) /* Power amplifier gain defined by board (dB) */
+
+extern audio_hal_func_t AUDIO_CODEC_ES8311_DEFAULT_HANDLE;
+
+#define AUDIO_CODEC_DEFAULT_CONFIG(){                   \
+        .adc_input  = AUDIO_HAL_ADC_INPUT_LINE1,        \
+        .dac_output = AUDIO_HAL_DAC_OUTPUT_ALL,         \
+        .codec_mode = AUDIO_HAL_CODEC_MODE_BOTH,        \
+        .i2s_iface = {                                  \
+            .mode = AUDIO_HAL_MODE_SLAVE,               \
+            .fmt = AUDIO_HAL_I2S_NORMAL,                \
+            .samples = AUDIO_HAL_48K_SAMPLES,           \
+            .bits = AUDIO_HAL_BIT_LENGTH_16BITS,        \
+        },                                              \
+};
+
+/**
+ * @brief ADC input data format
+ */
+#define AUDIO_ADC_INPUT_CH_FORMAT "MR"
+
+/**
+ * @brief Button Function Definition
+ */
+#define FUNC_BUTTON_EN              (1)
+#define INPUT_KEY_NUM               1
+#define BUTTON_PLAY_ID              1
+
+#define INPUT_KEY_DEFAULT_INFO()               \
+    {                                          \
+        {                                      \
+            .type    = PERIPH_ID_BUTTON,       \
+            .user_id = INPUT_KEY_USER_ID_PLAY, \
+            .act_id  = BUTTON_PLAY_ID,         \
+        }                                      \
+    }
+
+#endif
diff --git a/components/audio_board/m5stack_atoms3r/board_pins_config.c b/components/audio_board/m5stack_atoms3r/board_pins_config.c
new file mode 100644
index 000000000..23c655d72
--- /dev/null
+++ b/components/audio_board/m5stack_atoms3r/board_pins_config.c
@@ -0,0 +1,155 @@
+/*
+ * ESPRESSIF MIT License
+ *
+ * Copyright (c) 2022 <ESPRESSIF SYSTEMS (SHANGHAI) CO., LTD>
+ *
+ * Permission is hereby granted for use on all ESPRESSIF SYSTEMS products, in which case,
+ * it is free of charge, to any person obtaining a copy of this software and associated
+ * documentation files (the "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the Software is furnished
+ * to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all copies or
+ * substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *
+ */
+
+#include <string.h>
+#include "esp_log.h"
+#include "driver/gpio.h"
+#include "board.h"
+#include "audio_error.h"
+#include "audio_mem.h"
+#include "soc/soc_caps.h"
+
+static const char *TAG = "ESP32_S3_KORVO_2L";
+
+esp_err_t get_i2c_pins(i2c_port_t port, i2c_config_t *i2c_config)
+{
+    AUDIO_NULL_CHECK(TAG, i2c_config, return ESP_FAIL);
+    if (port == I2C_NUM_0 || port == I2C_NUM_1) {
+        i2c_config->sda_io_num = GPIO_NUM_38;
+        i2c_config->scl_io_num = GPIO_NUM_39;
+    } else {
+        i2c_config->sda_io_num = -1;
+        i2c_config->scl_io_num = -1;
+        ESP_LOGE(TAG, "i2c port %d is not supported", port);
+        return ESP_FAIL;
+    }
+    return ESP_OK;
+}
+
+esp_err_t get_i2s_pins(int port, board_i2s_pin_t *i2s_config)
+{
+    AUDIO_NULL_CHECK(TAG, i2s_config, return ESP_FAIL);
+    if (port == 0) {
+        i2s_config->bck_io_num = GPIO_NUM_8;
+        i2s_config->ws_io_num = GPIO_NUM_6;
+        i2s_config->data_out_num = GPIO_NUM_5;
+        i2s_config->data_in_num = GPIO_NUM_7;
+        i2s_config->mck_io_num = -1;
+    } else if (port == 1) {
+        i2s_config->bck_io_num = -1;
+        i2s_config->ws_io_num = -1;
+        i2s_config->data_out_num = -1;
+        i2s_config->data_in_num = -1;
+        i2s_config->mck_io_num = -1;
+    } else {
+        memset(i2s_config, -1, sizeof(board_i2s_pin_t));
+        ESP_LOGE(TAG, "i2s port %d is not supported", port);
+        return ESP_FAIL;
+    }
+
+    return ESP_OK;
+}
+
+esp_err_t get_spi_pins(spi_bus_config_t *spi_config, spi_device_interface_config_t *spi_device_interface_config)
+{
+    AUDIO_NULL_CHECK(TAG, spi_config, return ESP_FAIL);
+    AUDIO_NULL_CHECK(TAG, spi_device_interface_config, return ESP_FAIL);
+
+    spi_config->mosi_io_num = -1;
+    spi_config->miso_io_num = -1;
+    spi_config->sclk_io_num = -1;
+    spi_config->quadwp_io_num = -1;
+    spi_config->quadhd_io_num = -1;
+
+    spi_device_interface_config->spics_io_num = -1;
+
+    ESP_LOGW(TAG, "SPI interface is not supported");
+    return ESP_OK;
+}
+
+
+int8_t get_es8311_mclk_src(void)
+{
+    return ES8311_MCLK_SOURCE;
+}
+// sdcard
+
+int8_t get_sdcard_intr_gpio(void)
+{
+    return -1;
+}
+
+int8_t get_sdcard_open_file_num_max(void)
+{
+    return 0;
+}
+
+int8_t get_sdcard_power_ctrl_gpio(void)
+{
+    return -1;
+}
+
+// input-output pins
+
+int8_t get_headphone_detect_gpio(void)
+{
+    return -1;
+}
+
+int8_t get_pa_enable_gpio(void)
+{
+    return PA_ENABLE_GPIO;
+}
+
+// adc button id
+
+int8_t get_input_rec_id(void)
+{
+    return -1;
+}
+
+int8_t get_input_mode_id(void)
+{
+    return -1;
+}
+
+int8_t get_input_set_id(void)
+{
+    return -1;
+}
+
+int8_t get_input_play_id(void)
+{
+    return -1;
+}
+
+int8_t get_input_volup_id(void)
+{
+    return -1;
+}
+
+int8_t get_input_voldown_id(void)
+{
+    return -1;
+}
\ No newline at end of file
-- 
2.34.1

